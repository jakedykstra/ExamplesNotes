import React, { Component } from "react";
// connect function says take this Component and take mapStateToProps and return a container. The container is what we will export. React-redux is glue to two. 
import { connect } from "react-redux";
// We are importing the action creator selectBook
import { selectBook } from "../actions/index";
// This is a function that allows us to make sure the action, that is generated by the action creator, actually flows through all the different reducers in the application
import { bindActionCreators } from "redux";

class BookList extends Component {
  renderList() {
    return this.props.books.map(book => {
      return (
        <li
          key={book.title}
          //event handler for selecting a book. This all ties together with the action creator. Whenever it is clicked we call this.props.selectBook and pass in the book selected. With this we are calling the action creator
          onClick={() => this.props.selectBook(book)}
          className="list-group-item"
        >
          {book.title}
        </li>
      );
    });
  }

  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    );
  }
}

// this function takes the application state as an argument (state contains the array of books and the active book) then turns what is returned into props for react to use. It is set equal to this.props
// it takes all of the state and returns what we want from it. This is how we access the redux state so we can use it in react. It's our connection. 
function mapStateToProps(state) {
  // Whatever is returned will show up as props
  // inside of BookList
  // this object below will be available to react through this.props. In this object we will be able to access books through this.state.books, in the value is the redux state.books
  // if our state ever changes, this will rerender with our new list of books
  return {
    books: state.books
  };
}

// Anything returned from this function will end up as props on the BookList container
// just like above, what is returned here will be available as props to our components. In here we define it as selectBook so that we can call this.props.selectBook if our components need to access the data
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result should be passed to all of our reducers
  // selectBook in the value of this object is the action creator we imported in. 
  // bindActionCreators ensures that when the action creator is called it will run through all reducers. It's dispatching all of the actions to all the reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// Promote BookList from a component to a container - it needs to know
// about this new dispatch method, selectBook. Make it available
// as a prop.
// connect takes a function(mapstate) and a component(BookList - found above) and produces a container
// a container is a component that is aware of the state by redux
// we also added in the function dispatch method so that react can make it available in its props
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
